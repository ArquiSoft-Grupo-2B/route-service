services:
  # Base de datos PostgreSQL con PostGIS
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: routes_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-routes_db}
      POSTGRES_USER: ${POSTGRES_USER:-routes_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-routes_password}
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - routes_network

  # Aplicaci√≥n NestJS
  app:
    build: .
    container_name: routes_app
    restart: unless-stopped
    env_file:
      - .env.${APP_ENV:-development}
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      APP_ENV: ${APP_ENV:-development}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-routes_user}
      DB_PASSWORD: ${DB_PASSWORD:-routes_password}
      DB_NAME: ${DB_NAME:-routes_db}
      PORT: ${PORT:-3000}
      # Nuevas variables para microservicios
      CALCULATION_SERVICE_URL: ${CALCULATION_SERVICE_URL}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      AUTH_SERVICE_JWT_SECRET: ${AUTH_SERVICE_JWT_SECRET}
      # RabbitMQ Configuration
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://guest:guest@rabbit:5672}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-notification-exchange}
      RABBITMQ_EXCHANGE_TYPE: ${RABBITMQ_EXCHANGE_TYPE:-direct}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY:-notification-routing-key}
    ports:
      - '3000:3000'
    depends_on:
      - postgres
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - routes_network
    command: npm run start:dev

  # Adminer para administrar la base de datos (opcional)
  adminer:
    image: adminer:latest
    container_name: routes_adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    networks:
      - routes_network

volumes:
  postgres_data:

networks:
  routes_network:
    external: true
    name: routes_shared_network
